[tox]
envlist =
    py{310,311,312}
    py{310,311,312}-integration
    coverage
    security
    docs
    benchmark
minversion = 4.0
isolated_build = true

[gh-actions]
# Map GitHub Actions Python versions to tox environments
python =
    3.10: py310, coverage, security
    3.11: py311, docs
    3.12: py312, benchmark

[testenv]
# Base configuration for all test environments
deps =
    pytest>=7.0.0
    pytest-mock>=3.6.1
    pytest-cov>=4.0.0
    pytest-xdist>=3.0.0
    pytest-html>=3.1.0
    pytest-benchmark>=4.0.0
commands =
    pytest tests/tests_mock -v --tb=short {posargs}
passenv =
    CI
    GITHUB_*
    CODECOV_*
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}

[testenv:py{310,311,312}-integration]
# Integration tests for each Python version
deps =
    {[testenv]deps}
commands =
    pytest tests/tests_integration -v --tb=short -m integration {posargs}
passenv =
    {[testenv]passenv}
    CLIENT_ID
    CLIENT_SECRET
    CERT_PATH
    CERT_PASSWORD
    SANDBOX_TOKEN
    PIX_KEY

[testenv:coverage]
# Combined coverage report
deps =
    {[testenv]deps}
    coverage[toml]>=7.0.0
commands =
    pytest tests/tests_mock --cov=pypix_api --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=65
    coverage combine {toxworkdir}
    coverage report --show-missing
    coverage html -d {toxworkdir}/htmlcov
    coverage xml -o {toxworkdir}/coverage.xml

[testenv:security]
# Security testing environment
deps =
    bandit[toml]>=1.7.8
    safety>=3.0.0
    pip-audit>=2.6.0
commands =
    bandit -r pypix_api/ -ll -f json -o {toxworkdir}/bandit-report.json
    safety check --json --output {toxworkdir}/safety-report.json
    pip-audit --desc --format=json --output={toxworkdir}/pip-audit-report.json
allowlist_externals = echo
commands_post =
    echo "Security reports generated in {toxworkdir}/"

[testenv:docs]
# Documentation building and testing
changedir = docs
deps =
    sphinx>=7.0.0
    sphinx-rtd-theme>=2.0.0
    sphinx-autodoc-typehints>=1.25.0
    myst-parser>=2.0.0
    sphinx-copybutton>=0.5.2
    linkify-it-py>=2.0.0
    doc8>=1.1.0
commands =
    sphinx-build -W -b html . {toxworkdir}/docs_html
    sphinx-build -W -b linkcheck . {toxworkdir}/docs_linkcheck
    doc8 . --max-line-length=88

[testenv:benchmark]
# Performance benchmarking
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    pytest-memray>=1.4.0
    psutil>=5.9.0
commands =
    pytest tests/benchmarks -v --benchmark-only --benchmark-json={toxworkdir}/benchmark-report.json {posargs}
setenv =
    {[testenv]setenv}
    BENCHMARK_DISABLE_GC = true

[testenv:lint]
# Code quality checks
deps =
    ruff>=0.12.0
    mypy>=1.9.0
    types-requests>=2.31.0
commands =
    ruff format --check .
    ruff check .
    mypy pypix_api/

[testenv:format]
# Code formatting
deps =
    ruff>=0.12.0
commands =
    ruff format .
    ruff check . --fix

[testenv:py310-django]
# Optional: Django integration testing (if needed in future)
deps =
    {[testenv]deps}
    django>=4.2
    django-environ>=0.10.0
commands =
    pytest tests/integration/django -v {posargs}

[testenv:py312-async]
# Optional: Async testing (for future async support)
deps =
    {[testenv]deps}
    pytest-asyncio>=0.21.0
    aiohttp>=3.8.0
commands =
    pytest tests/async -v {posargs}

# Tool configurations
[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = .git,.tox,build,dist,docs,*.egg

[doc8]
max-line-length = 88
ignore = D001
