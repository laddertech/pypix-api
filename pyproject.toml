[project]
name = "pypix-api"
version = "0.5.0"
description = "Biblioteca em Python para comunicação com APIs bancárias focada na integração com o PIX"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Fábio Thomaz", email = "fabio@ladder.dev.br" }
]
license.file = "LICENSE"
keywords = ["pix", "api", "banco", "pagamento", "brasil"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "requests>=2.25.1",
    "python-dotenv>=0.15.0",
    "requests-pkcs12>=1.25",
    "ruff>=0.12.0",
]

[project.urls]
Homepage = "https://github.com/laddertech/pypix-api"
Repository = "https://github.com/laddertech/pypix-api"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.6.1",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "pre-commit>=3.7.0",
    "mypy>=1.9.0",
    "bandit[toml]>=1.7.8",
    "types-requests>=2.31.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
# Configurações base do Ruff
line-length = 88
exclude = [
    ".venv",
    "build",
    "dist",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # Line too long (handled by black)
    "S101", # Use of print (handled by black)
]

# Configurações específicas
[tool.ruff.lint.isort]
known-first-party = ["pypix_api"]

[tool.ruff.format]
quote-style = "single"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", "scripts", ".venv", "build", "dist"]
severity = "medium"
confidence = "medium"
skips = ["B101"]  # Skip assert_used test

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "-v",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "mock: marks tests as mock tests",
]
