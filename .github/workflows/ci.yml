name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality checks job
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e ".[dev]"

      - name: Check code formatting with Ruff
        run: uv run ruff format --check .

      - name: Lint code with Ruff
        run: uv run ruff check .

      - name: Type checking with MyPy
        run: uv run mypy pypix_api/

      - name: Security scan with Bandit
        run: |
          echo "Running Bandit security scan..."
          uv run bandit -r pypix_api/ -ll -f json -o bandit-ci-report.json || true

          # Show summary
          echo "## üîí Security Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "bandit-ci-report.json" ]; then
            HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-ci-report.json 2>/dev/null || echo "0")
            MED_ISSUES=$(jq '.results | map(select(.issue_severity == "MEDIUM")) | length' bandit-ci-report.json 2>/dev/null || echo "0")
            LOW_ISSUES=$(jq '.results | map(select(.issue_severity == "LOW")) | length' bandit-ci-report.json 2>/dev/null || echo "0")

            echo "- **High severity**: $HIGH_ISSUES issues" >> $GITHUB_STEP_SUMMARY
            echo "- **Medium severity**: $MED_ISSUES issues" >> $GITHUB_STEP_SUMMARY
            echo "- **Low severity**: $LOW_ISSUES issues" >> $GITHUB_STEP_SUMMARY

            # Fail on high severity issues
            if [ "$HIGH_ISSUES" -gt "0" ]; then
              echo "‚ùå High severity security issues found!" >> $GITHUB_STEP_SUMMARY
              echo "Please review and fix security issues before merging."
              exit 1
            fi
          else
            echo "- Bandit scan completed successfully" >> $GITHUB_STEP_SUMMARY
          fi

  # Test matrix job
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
        include:
          # Test on different OS for main Python version
          - python-version: "3.10"
            os: windows-latest
          - python-version: "3.10"
            os: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e ".[dev]"

      - name: Run unit tests
        run: uv run pytest tests/tests_mock -v --tb=short

      - name: Run tests with coverage (Linux, Python 3.10 only)
        if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
        run: uv run pytest tests/tests_mock --cov=pypix_api --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifact
        if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_html/
          retention-days: 30

  # Integration tests (optional, only on main Python version)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e ".[dev]"

      - name: Run integration tests
        run: uv run pytest tests/tests_integration -v --tb=short -m integration
        continue-on-error: true  # Integration tests may fail due to external dependencies
        env:
          # Add any required environment variables for integration tests
          SANDBOX_MODE: "true"

  # Build verification job
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Install build dependencies
        run: uv pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  # Summary job for required status checks
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    steps:
      - name: Check CI success
        run: |
          if [[ "${{ needs.quality.result }}" == "success" &&
                "${{ needs.test.result }}" == "success" &&
                "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed!"
            exit 0
          else
            echo "‚ùå Some CI checks failed:"
            echo "  Quality: ${{ needs.quality.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Build: ${{ needs.build.result }}"
            exit 1
          fi
