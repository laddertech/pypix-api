name: CD Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string

jobs:
  # Pre-deployment quality gate
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync
          uv pip install -e ".[dev]"

      - name: Run full quality suite
        run: uv run make quality-full

      - name: Get version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Verify version consistency
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          PACKAGE_VERSION=$(python -c "import pypix_api; print(pypix_api.__version__)" 2>/dev/null || echo "unknown")
          echo "Release version: $VERSION"
          echo "Package version: $PACKAGE_VERSION"

  # Build and publish to PyPI
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: production
    permissions:
      id-token: write  # For trusted publishing
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Install build dependencies
        run: |
          uv sync
          uv pip install build twine

      - name: Build package
        run: uv run python -m build

      - name: Check package
        run: uv run twine check dist/*

      - name: Publish to Test PyPI first
        if: github.event_name == 'workflow_dispatch'
        run: |
          uv run twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Publish to PyPI
        if: github.event_name == 'release'
        run: |
          uv run twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/
          retention-days: 90

  # Post-deployment verification
  verify-deploy:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy]
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Wait for package availability
        run: |
          VERSION="${{ needs.pre-deploy.outputs.version }}"
          echo "Waiting for pypix-api==$VERSION to be available on PyPI..."

          for i in {1..30}; do
            if pip install --dry-run pypix-api==$VERSION; then
              echo "✅ Package is available!"
              break
            fi
            echo "⏳ Attempt $i/30 - Package not yet available, waiting..."
            sleep 30
          done

      - name: Test installation
        run: |
          VERSION="${{ needs.pre-deploy.outputs.version }}"
          pip install pypix-api==$VERSION
          python -c "import pypix_api; print(f'Successfully installed pypix-api {pypix_api.__version__}')"

      - name: Basic smoke test
        run: |
          python -c "
          from pypix_api.auth.oauth2 import OAuth2Client
          from pypix_api.banks.bb import BBPixAPI
          from pypix_api.banks.sicoob import SicoobPixAPI
          print('✅ All main modules imported successfully')
          "

  # Create GitHub release notes
  release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [verify-deploy]
    if: github.event_name == 'release' && needs.verify-deploy.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" HEAD)
          fi

          echo "## What's Changed" >> changelog.md
          echo "" >> changelog.md
          echo "$COMMITS" >> changelog.md
          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ github.event.release.tag_name }}" >> changelog.md

      - name: Update release notes
        run: |
          gh release edit ${{ github.event.release.tag_name }} --notes-file changelog.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment summary
  deploy-success:
    name: Deployment Success
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy, verify-deploy]
    if: always()
    steps:
      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.pre-deploy.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-deploy checks**: ${{ needs.pre-deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Verification**: ${{ needs.verify-deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.verify-deploy.result }}" == "success" ]]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 Package is now available: \`pip install pypix-api==${{ needs.pre-deploy.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed or incomplete**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
