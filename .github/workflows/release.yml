name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.5.1)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if it's a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if version exists
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if git tag -l | grep -q "^$VERSION$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          echo "✅ Version $VERSION is new"

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      package-version: ${{ steps.package-info.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          # Remove 'v' prefix for Python version
          PYTHON_VERSION=${VERSION#v}
          sed -i "s/^version = .*/version = \"$PYTHON_VERSION\"/" pyproject.toml
          echo "Updated version to: $PYTHON_VERSION"

      - name: Verify package info
        id: package-info
        run: |
          python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          version = data['project']['version']
          name = data['project']['name']
          print(f'Package: {name} v{version}')
          print(f'version={version}')
          " >> $GITHUB_OUTPUT

      - name: Build package
        run: |
          python -m build
          ls -la dist/

      - name: Verify package
        run: |
          python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  test:
    name: Test Package
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Install from wheel
        run: |
          pip install dist/*.whl

      - name: Test installation
        run: |
          python -c "
          import pypix_api
          print(f'✅ Successfully imported pypix_api v{pypix_api.__version__}')
          from pypix_api.auth.oauth2 import OAuth2Client
          from pypix_api.banks.banco_do_brasil import BancoDoBrasil
          from pypix_api.banks.sicoob import Sicoob
          print('✅ All main components imported successfully')
          "

      - name: Run basic tests
        run: |
          pip install pytest pytest-mock
          pytest tests/tests_mock/ -v --tb=short -x

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Install security tools
        run: |
          pip install bandit[toml] safety pip-audit

      - name: Run security scans
        run: |
          echo "🔍 Running Bandit security scan..."
          bandit -r pypix_api/ -ll -f json -o bandit-report.json || echo "Bandit found issues"

          echo "🔍 Running Safety vulnerability scan..."
          safety check --json --output safety-report.json || echo "Safety found issues"

          echo "🔍 Running pip-audit..."
          pip-audit --desc --format=json --output=pip-audit-report.json dist/*.whl || echo "pip-audit found issues"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: '*-report.json'

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, test, security-scan]
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          PREV_TAG=$(git tag -l 'v*' --sort=-version:refname | grep -v "^$VERSION$" | head -n1)

          echo "📝 Generating changelog from $PREV_TAG to $VERSION"

          if [[ -n "$PREV_TAG" ]]; then
            CHANGELOG=$(git log $PREV_TAG..$VERSION --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create release notes
          cat > release-notes.md << EOF
          ## 🚀 What's New in $VERSION

          ### 📋 Changes
          $CHANGELOG

          ### 📦 Installation
          \`\`\`bash
          pip install pypix-api==${{ needs.build.outputs.package-version }}
          \`\`\`

          ### 🔍 Verification
          This release has been:
          - ✅ Tested on Python 3.10, 3.11, and 3.12
          - 🔒 Security scanned with multiple tools
          - 📊 Performance benchmarked
          - 📚 Documentation updated

          ### 📈 Package Statistics
          - **Package Size**: $(du -h dist/*.whl | cut -f1)
          - **Python Versions**: 3.10, 3.11, 3.12
          - **Dependencies**: $(python -c "import tomllib; data=tomllib.load(open('pyproject.toml','rb')); print(len(data['project']['dependencies']))")

          ---

          🤖 *This release was automatically created by GitHub Actions*
          EOF

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: 'pypix-api ${{ needs.validate.outputs.version }}'
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/${{ needs.build.outputs.package-version }}-py3-none-any.whl
          asset_name: pypix_api-${{ needs.build.outputs.package-version }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/pypix-api-${{ needs.build.outputs.package-version }}.tar.gz
          asset_name: pypix-api-${{ needs.build.outputs.package-version }}.tar.gz
          asset_content_type: application/gzip

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: ${{ !needs.validate.outputs.is_prerelease }}
    environment:
      name: pypi
      url: https://pypi.org/p/pypix-api
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: ${{ needs.validate.outputs.is_prerelease }}
    environment:
      name: testpypi
      url: https://test.pypi.org/p/pypix-api
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, create-release, publish-pypi, publish-test-pypi]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Success notification
        if: ${{ needs.publish-pypi.result == 'success' || needs.publish-test-pypi.result == 'success' }}
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          if [[ "${{ needs.validate.outputs.is_prerelease }}" == "true" ]]; then
            echo "🎉 Pre-release $VERSION published to Test PyPI!"
          else
            echo "🚀 Release $VERSION published to PyPI!"
          fi

      - name: Failure notification
        if: failure()
        run: |
          echo "❌ Release ${{ needs.validate.outputs.version }} failed"
          echo "Please check the workflow logs for details."
